/*
Name: Abrar Haque
Email: ahaque10@myseneca.ca
ID: 107465189
Date: July 11, 2021
I have done all the coding by myself and only copied the code that my professor provided to complete my workshops and assignments.
*/

In this Workshop, I learned how to use a std::vector. The std::vector is a 
type of container template class which is a part of the Standard Template 
Library (more commonly known as an STL) of the C++ standard library. As the 
name suggests, the containers defined in the STL are defined as templates 
which allow code reuse. In general the, the purpose of an STL container is 
to manage elements within the data structure that the specific container 
represents. For example, manages elements allocated off the heap, all of 
which are stored contiguously in memory. Since elements are allocated of the 
heap, it can modify its size, either increasing or decreasing, whenever 
required. Other STL containers also store their elements off the heap however,
this specific container excels at insertion or removal of elements at the 
end of the array of elements. Other STL containers have their own benefits 
and drawbacks. 

On the other hand, a template parameter of type sdds::Vehicle * for the 
containers (as used in the workshop) creates a container that manages 
elements where each element is a polymorphic object. The static type (sdds::
Vechicle), only specifies the hierarchy. The dynamic type of each element 
is of any concrete type defined within the hierarchy. Since the amount of 
objects to be created as well as the specific type of each are 
determined at run-time, late-binding must occur as the specific concrete type 
is only known at runtime. A polymorphic object facilitates late-binding by 
calling the correct member function based on it's dynamic type not the 
static type.