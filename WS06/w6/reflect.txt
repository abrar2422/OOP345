/*
Name: Abrar Haque
Email: ahaque10@myseneca.ca
ID: 107465189
Date: July 11, 2021
I have done all the coding by myself and only copied the code that my professor provided to complete my workshops and assignments.
*/

-1:
When something dynamic is created the compiler doesn't see if it's a vector or an array or something else.
If that thing is created dynamically and resides on the 'heap' it needs to deallocated or else it will be
considered memory leak. Thus the dynamically allocated memory in vector needs to be deallocated
-2:
The error handling part of the 'loadData' function takes care of any error that might occur.
the try block executes a set of command and if something goes wrong in that try block it comes to the 
appropriate catch block to resolve the issue. In our case we simply print out the error message by
doing that we simply discard that line of data and move on to the next one. In my 'createInstance' function
I converted the incoming istream to string using getline. That way I am dealing with only one car record
at any given time. using if else I check if it's a car or a racecar and create appropriate instance.
The car constructor than takes over and throws exceptions if topspeed is anything but numbers and if the condition of
the car is not recognized. which then catch blocks takes over and prints out error messages accordingly.

Another solution could have been before sending the stream to 'createInstance()'
	- Isolate each row using -> getline(stream, variable, '\n');
	- Check for bad rows ((tag != r || R || C||c) OR topspeed != number) 
	- discard the bad rows
	- send only the good rows to createInstance of car or racecar;
that way no validation will be required in the constructor of Car

-3:
In short Vehicle is not a concrete class, it's an abstract class.
std::list<sdds::Vehicle> won't work since a list of abstract class can't be created.